{"version":3,"sources":["grid.js"],"names":["React","PropTypes","G","Line","Horizontal","ticks","y","svg","map","tick","Vertical","x","index","Both","props","propTypes","func","dataPoints","array","object","Direction","VERTICAL","HORIZONTAL","BOTH","Grid","direction","oneOf","Object","values","belowChart","bool","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { G, Line } from 'react-native-svg'\n\nconst Horizontal = ({ ticks = [], y, svg }) => {\n    return (\n        <G>\n            {ticks.map((tick) => (\n                <Line\n                    key={tick}\n                    x1={'0%'}\n                    x2={'100%'}\n                    y1={y(tick)}\n                    y2={y(tick)}\n                    strokeWidth={1}\n                    stroke={'rgba(0,0,0,0.2)'}\n                    {...svg}\n                />\n            ))}\n        </G>\n    )\n}\n\nconst Vertical = ({ ticks = [], x, svg }) => {\n    return (\n        <G>\n            {ticks.map((tick, index) => (\n                <Line\n                    key={index}\n                    y1={'0%'}\n                    y2={'100%'}\n                    x1={x(tick)}\n                    x2={x(tick)}\n                    strokeWidth={1}\n                    stroke={'rgba(0,0,0,0.2)'}\n                    {...svg}\n                />\n            ))}\n        </G>\n    )\n}\n\nconst Both = (props) => {\n    return (\n        <G>\n            <Horizontal {...props} />\n            <Vertical {...props} />\n        </G>\n    )\n}\n\nVertical.propTypes = {\n    x: PropTypes.func,\n    dataPoints: PropTypes.array,\n    svg: PropTypes.object,\n}\n\nHorizontal.propTypes = {\n    y: PropTypes.func,\n    ticks: PropTypes.array,\n}\n\nBoth.propTypes = {\n    ...Vertical.propTypes,\n    ...Horizontal.propTypes,\n}\n\nconst Direction = {\n    VERTICAL: 'VERTICAL',\n    HORIZONTAL: 'HORIZONTAL',\n    BOTH: 'BOTH',\n}\n\nconst Grid = ({ direction, ...props }) => {\n    if (direction === Direction.VERTICAL) {\n        return <Vertical {...props} />\n    } else if (direction === Direction.HORIZONTAL) {\n        return <Horizontal {...props} />\n    } else if (direction === Direction.BOTH) {\n        return <Both {...props} />\n    }\n\n    return null\n}\n\nGrid.Direction = Direction\n\nGrid.propTypes = {\n    direction: PropTypes.oneOf(Object.values(Direction)),\n    belowChart: PropTypes.bool,\n    svg: PropTypes.object,\n}\n\nGrid.defaultProps = {\n    direction: Direction.HORIZONTAL,\n    belowChart: true,\n}\n\nexport default Grid\n"]}