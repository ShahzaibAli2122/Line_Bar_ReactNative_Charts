{"version":3,"sources":["chart-grouped.js"],"names":["array","PropTypes","React","PureComponent","View","Svg","Path","Chart","ChartGrouped","width","height","_onLayout","event","nativeEvent","layout","setState","createPaths","render","data","xAccessor","yAccessor","yScale","xScale","style","animate","animationDuration","numberOfTicks","contentInset","top","bottom","left","right","gridMax","gridMin","clampX","clampY","svg","children","props","state","length","mappedData","map","dataArray","item","index","y","x","yValues","merge","xValues","yExtent","extent","xExtent","yMin","yMax","xMin","xMax","domain","range","clamp","paths","ticks","extraProps","flex","Children","child","belowChart","cloneElement","path","pathSvg","key","propTypes","arrayOf","shape","oneOfType","object","number","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import * as array from 'd3-array'\nimport PropTypes from 'prop-types'\nimport React, { PureComponent } from 'react'\nimport { View } from 'react-native'\nimport Svg from 'react-native-svg'\nimport Path from '../animated-path'\nimport Chart from './chart'\n\nclass ChartGrouped extends PureComponent {\n    state = {\n        width: 0,\n        height: 0,\n    }\n\n    _onLayout(event) {\n        const {\n            nativeEvent: {\n                layout: { height, width },\n            },\n        } = event\n        this.setState({ height, width })\n    }\n\n    createPaths() {\n        throw 'Extending \"ChartGrouped\" requires you to override \"createPaths'\n    }\n\n    render() {\n        const {\n            data,\n            xAccessor,\n            yAccessor,\n            yScale,\n            xScale,\n            style,\n            animate,\n            animationDuration,\n            numberOfTicks,\n            contentInset: { top = 0, bottom = 0, left = 0, right = 0 },\n            gridMax,\n            gridMin,\n            clampX,\n            clampY,\n            svg,\n            children,\n        } = this.props\n\n        const { width, height } = this.state\n\n        if (data.length === 0) {\n            return <View style={style} />\n        }\n\n        const mappedData = data.map((dataArray) =>\n            dataArray.data.map((item, index) => ({\n                y: yAccessor({ item, index }),\n                x: xAccessor({ item, index }),\n            }))\n        )\n\n        const yValues = array.merge(mappedData).map((item) => item.y)\n        const xValues = array.merge(mappedData).map((item) => item.x)\n\n        const yExtent = array.extent([...yValues, gridMin, gridMax])\n        const xExtent = array.extent([...xValues])\n\n        const { yMin = yExtent[0], yMax = yExtent[1], xMin = xExtent[0], xMax = xExtent[1] } = this.props\n\n        //invert range to support svg coordinate system\n        const y = yScale()\n            .domain([yMin, yMax])\n            .range([height - bottom, top])\n            .clamp(clampY)\n\n        const x = xScale()\n            .domain([xMin, xMax])\n            .range([left, width - right])\n            .clamp(clampX)\n\n        const paths = this.createPaths({\n            data: mappedData,\n            x,\n            y,\n        })\n\n        const ticks = y.ticks(numberOfTicks)\n\n        const extraProps = {\n            x,\n            y,\n            data,\n            ticks,\n            width,\n            height,\n            ...paths,\n        }\n\n        return (\n            <View style={style}>\n                <View style={{ flex: 1 }} onLayout={(event) => this._onLayout(event)}>\n                    {height > 0 && width > 0 && (\n                        <Svg style={{ height, width }}>\n                            {React.Children.map(children, (child) => {\n                                if (child && child.props.belowChart) {\n                                    return React.cloneElement(child, extraProps)\n                                }\n                                return null\n                            })}\n                            {paths.path.map((path, index) => {\n                                const { svg: pathSvg } = data[index]\n                                const key = path + '-' + index\n                                return (\n                                    <Path\n                                        key={key}\n                                        fill={'none'}\n                                        {...svg}\n                                        {...pathSvg}\n                                        d={path}\n                                        animate={animate}\n                                        animationDuration={animationDuration}\n                                    />\n                                )\n                            })}\n                            {React.Children.map(children, (child) => {\n                                if (child && !child.props.belowChart) {\n                                    return React.cloneElement(child, extraProps)\n                                }\n                                return null\n                            })}\n                        </Svg>\n                    )}\n                </View>\n            </View>\n        )\n    }\n}\n\nChartGrouped.propTypes = {\n    ...Chart.propTypes,\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            data: PropTypes.oneOfType([\n                PropTypes.arrayOf(PropTypes.object),\n                PropTypes.arrayOf(PropTypes.number),\n                PropTypes.arrayOf(PropTypes.array),\n            ]),\n            svg: PropTypes.object,\n        })\n    ).isRequired,\n}\n\nChartGrouped.defaultProps = {\n    ...Chart.defaultProps,\n}\n\nexport default ChartGrouped\n"]}