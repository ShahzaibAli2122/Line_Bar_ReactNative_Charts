{"version":3,"sources":["chart.js"],"names":["array","scale","shape","PropTypes","React","PureComponent","View","Svg","Path","Chart","width","height","_onLayout","event","nativeEvent","layout","setState","createPaths","render","data","xAccessor","yAccessor","yScale","xScale","style","animate","animationDuration","numberOfTicks","contentInset","top","bottom","left","right","gridMax","gridMin","clampX","clampY","svg","children","props","state","length","mappedData","map","item","index","y","x","yValues","xValues","yExtent","extent","xExtent","yMin","yMax","xMin","xMax","domain","range","clamp","paths","ticks","extraProps","flex","Children","child","belowChart","cloneElement","path","propTypes","oneOfType","arrayOf","object","number","isRequired","any","bool","curve","func","defaultProps","curveLinear","scaleLinear"],"mappings":"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","sourcesContent":["import * as array from 'd3-array'\nimport * as scale from 'd3-scale'\nimport * as shape from 'd3-shape'\nimport PropTypes from 'prop-types'\nimport React, { PureComponent } from 'react'\nimport { View } from 'react-native'\nimport Svg from 'react-native-svg'\nimport Path from '../animated-path'\n\nclass Chart extends PureComponent {\n    state = {\n        width: 0,\n        height: 0,\n    }\n\n    _onLayout(event) {\n        const {\n            nativeEvent: {\n                layout: { height, width },\n            },\n        } = event\n        this.setState({ height, width })\n    }\n\n    createPaths() {\n        throw 'Extending \"Chart\" requires you to override \"createPaths'\n    }\n\n    render() {\n        const {\n            data,\n            xAccessor,\n            yAccessor,\n            yScale,\n            xScale,\n            style,\n            animate,\n            animationDuration,\n            numberOfTicks,\n            contentInset: { top = 0, bottom = 0, left = 0, right = 0 },\n            gridMax,\n            gridMin,\n            clampX,\n            clampY,\n            svg,\n            children,\n        } = this.props\n\n        const { width, height } = this.state\n\n        if (data.length === 0) {\n            return <View style={style} />\n        }\n\n        const mappedData = data.map((item, index) => ({\n            y: yAccessor({ item, index }),\n            x: xAccessor({ item, index }),\n        }))\n\n        const yValues = mappedData.map((item) => item.y)\n        const xValues = mappedData.map((item) => item.x)\n\n        const yExtent = array.extent([...yValues, gridMin, gridMax])\n        const xExtent = array.extent([...xValues])\n\n        const { yMin = yExtent[0], yMax = yExtent[1], xMin = xExtent[0], xMax = xExtent[1] } = this.props\n\n        //invert range to support svg coordinate system\n        const y = yScale()\n            .domain([yMin, yMax])\n            .range([height - bottom, top])\n            .clamp(clampY)\n\n        const x = xScale()\n            .domain([xMin, xMax])\n            .range([left, width - right])\n            .clamp(clampX)\n\n        const paths = this.createPaths({\n            data: mappedData,\n            x,\n            y,\n        })\n\n        const ticks = y.ticks(numberOfTicks)\n\n        const extraProps = {\n            x,\n            y,\n            data,\n            ticks,\n            width,\n            height,\n            ...paths,\n        }\n\n        return (\n            <View style={style}>\n                <View style={{ flex: 1 }} onLayout={(event) => this._onLayout(event)}>\n                    {height > 0 && width > 0 && (\n                        <Svg style={{ height, width }}>\n                            {React.Children.map(children, (child) => {\n                                if (child && child.props.belowChart) {\n                                    return React.cloneElement(child, extraProps)\n                                }\n                                return null\n                            })}\n                            <Path\n                                fill={'none'}\n                                {...svg}\n                                d={paths.path}\n                                animate={animate}\n                                animationDuration={animationDuration}\n                            />\n                            {React.Children.map(children, (child) => {\n                                if (child && !child.props.belowChart) {\n                                    return React.cloneElement(child, extraProps)\n                                }\n                                return null\n                            })}\n                        </Svg>\n                    )}\n                </View>\n            </View>\n        )\n    }\n}\n\nChart.propTypes = {\n    data: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.object),\n        PropTypes.arrayOf(PropTypes.number),\n        PropTypes.arrayOf(PropTypes.array),\n    ]).isRequired,\n    svg: PropTypes.object,\n\n    style: PropTypes.any,\n\n    animate: PropTypes.bool,\n    animationDuration: PropTypes.number,\n\n    curve: PropTypes.func,\n    contentInset: PropTypes.shape({\n        top: PropTypes.number,\n        left: PropTypes.number,\n        right: PropTypes.number,\n        bottom: PropTypes.number,\n    }),\n    numberOfTicks: PropTypes.number,\n\n    gridMin: PropTypes.number,\n    gridMax: PropTypes.number,\n\n    yMin: PropTypes.any,\n    yMax: PropTypes.any,\n    xMin: PropTypes.any,\n    xMax: PropTypes.any,\n    clampX: PropTypes.bool,\n    clampY: PropTypes.bool,\n\n    xScale: PropTypes.func,\n    yScale: PropTypes.func,\n\n    xAccessor: PropTypes.func,\n    yAccessor: PropTypes.func,\n}\n\nChart.defaultProps = {\n    svg: {},\n    width: 100,\n    height: 100,\n    curve: shape.curveLinear,\n    contentInset: {},\n    numberOfTicks: 10,\n    xScale: scale.scaleLinear,\n    yScale: scale.scaleLinear,\n    xAccessor: ({ index }) => index,\n    yAccessor: ({ item }) => item,\n}\n\nexport default Chart\n"]}