{"version":3,"sources":["bar-chart.js"],"names":["array","scale","shape","PropTypes","React","PureComponent","View","Svg","Path","BarChart","width","height","_onLayout","event","nativeEvent","layout","setState","calcXScale","domain","horizontal","contentInset","left","right","spacingInner","spacingOuter","clamp","props","state","scaleLinear","range","scaleBand","paddingInner","paddingOuter","calcYScale","top","bottom","calcAreas","x","y","data","yAccessor","values","map","item","bar","index","path","area","value","_index","bandwidth","x0","x1","defined","y0","y1","calcExtent","gridMin","gridMax","obj","extent","yMin","yMax","calcIndexes","_","render","animate","animationDuration","style","numberOfTicks","svg","children","length","indexes","ticks","xDomain","yDomain","areas","filter","undefined","extraProps","flex","Children","child","belowChart","cloneElement","barSvg","propTypes","arrayOf","oneOfType","number","object","isRequired","any","bool","defaultProps"],"mappings":"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","sourcesContent":["import * as array from 'd3-array'\nimport * as scale from 'd3-scale'\nimport * as shape from 'd3-shape'\nimport PropTypes from 'prop-types'\nimport React, { PureComponent } from 'react'\nimport { View } from 'react-native'\nimport Svg from 'react-native-svg'\nimport Path from '../animated-path'\n\nclass BarChart extends PureComponent {\n    state = {\n        width: 0,\n        height: 0,\n    }\n\n    _onLayout(event) {\n        const {\n            nativeEvent: {\n                layout: { height, width },\n            },\n        } = event\n        this.setState({ height, width })\n    }\n\n    calcXScale(domain) {\n        const {\n            horizontal,\n            contentInset: { left = 0, right = 0 },\n            spacingInner,\n            spacingOuter,\n            clamp,\n        } = this.props\n\n        const { width } = this.state\n\n        if (horizontal) {\n            return scale\n                .scaleLinear()\n                .domain(domain)\n                .range([left, width - right])\n                .clamp(clamp)\n        }\n\n        return scale\n            .scaleBand()\n            .domain(domain)\n            .range([left, width - right])\n            .paddingInner([spacingInner])\n            .paddingOuter([spacingOuter])\n    }\n\n    calcYScale(domain) {\n        const {\n            horizontal,\n            contentInset: { top = 0, bottom = 0 },\n            spacingInner,\n            spacingOuter,\n            clamp,\n        } = this.props\n\n        const { height } = this.state\n\n        if (horizontal) {\n            return scale\n                .scaleBand()\n                .domain(domain)\n                .range([top, height - bottom])\n                .paddingInner([spacingInner])\n                .paddingOuter([spacingOuter])\n        }\n\n        return scale\n            .scaleLinear()\n            .domain(domain)\n            .range([height - bottom, top])\n            .clamp(clamp)\n    }\n\n    calcAreas(x, y) {\n        const { horizontal, data, yAccessor } = this.props\n\n        const values = data.map((item) => yAccessor({ item }))\n\n        if (horizontal) {\n            return data.map((bar, index) => ({\n                bar,\n                path: shape\n                    .area()\n                    .y((value, _index) => (_index === 0 ? y(index) : y(index) + y.bandwidth()))\n                    .x0(x(0))\n                    .x1((value) => x(value))\n                    .defined((value) => typeof value === 'number')([values[index], values[index]]),\n            }))\n        }\n\n        return data.map((bar, index) => ({\n            bar,\n            path: shape\n                .area()\n                .y0(y(0))\n                .y1((value) => y(value))\n                .x((value, _index) => (_index === 0 ? x(index) : x(index) + x.bandwidth()))\n                .defined((value) => typeof value === 'number')([values[index], values[index]]),\n        }))\n    }\n\n    calcExtent() {\n        const { data, gridMin, gridMax, yAccessor } = this.props\n        const values = data.map((obj) => yAccessor({ item: obj }))\n\n        const extent = array.extent([...values, gridMax, gridMin])\n\n        const { yMin = extent[0], yMax = extent[1] } = this.props\n\n        return [yMin, yMax]\n    }\n\n    calcIndexes() {\n        const { data } = this.props\n        return data.map((_, index) => index)\n    }\n\n    render() {\n        const { data, animate, animationDuration, style, numberOfTicks, svg, horizontal, children } = this.props\n\n        const { height, width } = this.state\n\n        if (data.length === 0) {\n            return <View style={style} />\n        }\n\n        const extent = this.calcExtent()\n        const indexes = this.calcIndexes()\n        const ticks = array.ticks(extent[0], extent[1], numberOfTicks)\n\n        const xDomain = horizontal ? extent : indexes\n        const yDomain = horizontal ? indexes : extent\n\n        const x = this.calcXScale(xDomain)\n        const y = this.calcYScale(yDomain)\n\n        const bandwidth = horizontal ? y.bandwidth() : x.bandwidth()\n\n        const areas = this.calcAreas(x, y).filter(\n            (area) => area.bar !== null && area.bar !== undefined && area.path !== null\n        )\n\n        const extraProps = {\n            x,\n            y,\n            width,\n            height,\n            bandwidth,\n            ticks,\n            data,\n        }\n\n        return (\n            <View style={style}>\n                <View style={{ flex: 1 }} onLayout={(event) => this._onLayout(event)}>\n                    {height > 0 && width > 0 && (\n                        <Svg style={{ height, width }}>\n                            {React.Children.map(children, (child) => {\n                                if (child && child.props.belowChart) {\n                                    return React.cloneElement(child, extraProps)\n                                }\n                            })}\n                            {areas.map((area, index) => {\n                                const {\n                                    bar: { svg: barSvg = {} },\n                                    path,\n                                } = area\n\n                                return (\n                                    <Path\n                                        key={index}\n                                        {...svg}\n                                        {...barSvg}\n                                        d={path}\n                                        animate={animate}\n                                        animationDuration={animationDuration}\n                                    />\n                                )\n                            })}\n                            {React.Children.map(children, (child) => {\n                                if (child && !child.props.belowChart) {\n                                    return React.cloneElement(child, extraProps)\n                                }\n                            })}\n                        </Svg>\n                    )}\n                </View>\n            </View>\n        )\n    }\n}\n\nBarChart.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.object])).isRequired,\n    style: PropTypes.any,\n    spacingInner: PropTypes.number,\n    spacingOuter: PropTypes.number,\n    animate: PropTypes.bool,\n    animationDuration: PropTypes.number,\n    contentInset: PropTypes.shape({\n        top: PropTypes.number,\n        left: PropTypes.number,\n        right: PropTypes.number,\n        bottom: PropTypes.number,\n    }),\n    numberOfTicks: PropTypes.number,\n    gridMin: PropTypes.number,\n    gridMax: PropTypes.number,\n    svg: PropTypes.object,\n\n    yMin: PropTypes.any,\n    yMax: PropTypes.any,\n    clamp: PropTypes.bool,\n}\n\nBarChart.defaultProps = {\n    spacingInner: 0.05,\n    spacingOuter: 0.05,\n    contentInset: {},\n    numberOfTicks: 10,\n    svg: {},\n    yAccessor: ({ item }) => item,\n}\n\nexport default BarChart\n"]}