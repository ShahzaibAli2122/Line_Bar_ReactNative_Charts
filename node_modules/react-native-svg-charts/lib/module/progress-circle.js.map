{"version":3,"sources":["progress-circle.js"],"names":["React","PureComponent","View","PropTypes","shape","Path","Svg","G","ProgressCircle","height","width","_onLayout","event","nativeEvent","layout","setState","render","style","progressColor","backgroundColor","strokeWidth","startAngle","endAngle","animate","animateDuration","children","cornerRadius","props","progress","state","outerDiameter","Math","min","isFinite","isNaN","data","key","value","color","pieSlices","pie","d","sort","a","arcs","map","slice","index","path","arc","outerRadius","innerRadius","extraProps","Children","child","belowChart","cloneElement","propTypes","number","isRequired","any","bool","defaultProps","PI"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport { View } from 'react-native'\nimport PropTypes from 'prop-types'\nimport * as shape from 'd3-shape'\nimport Path from './animated-path'\nimport Svg, { G } from 'react-native-svg'\n\nclass ProgressCircle extends PureComponent {\n    state = {\n        height: 0,\n        width: 0,\n    }\n\n    _onLayout(event) {\n        const {\n            nativeEvent: {\n                layout: { height, width },\n            },\n        } = event\n        this.setState({ height, width })\n    }\n\n    render() {\n        const {\n            style,\n            progressColor,\n            backgroundColor,\n            strokeWidth,\n            startAngle,\n            endAngle,\n            animate,\n            animateDuration,\n            children,\n            cornerRadius,\n        } = this.props\n\n        let { progress } = this.props\n\n        const { height, width } = this.state\n\n        const outerDiameter = Math.min(width, height)\n\n        if (!isFinite(progress) || isNaN(progress)) {\n            progress = 0\n        }\n\n        // important order to have progress render over \"rest\"\n        const data = [\n            {\n                key: 'rest',\n                value: 1 - progress,\n                color: backgroundColor,\n            },\n            {\n                key: 'progress',\n                value: progress,\n                color: progressColor,\n            },\n        ]\n\n        const pieSlices = shape\n            .pie()\n            .value((d) => d.value)\n            .sort((a) => (a.key === 'rest' ? 1 : -1))\n            .startAngle(startAngle)\n            .endAngle(endAngle)(data)\n\n        const arcs = pieSlices.map((slice, index) => ({\n            ...data[index],\n            ...slice,\n            path: shape\n                .arc()\n                .outerRadius(outerDiameter / 2) // Radius of the pie\n                .innerRadius(outerDiameter / 2 - strokeWidth) // Inner radius: to create a donut or pie\n                .startAngle(index === 0 ? startAngle : slice.startAngle)\n                .endAngle(index === 0 ? endAngle : slice.endAngle)\n                .cornerRadius(cornerRadius)(),\n        }))\n\n        const extraProps = {\n            width,\n            height,\n        }\n\n        return (\n            <View style={style} onLayout={(event) => this._onLayout(event)}>\n                {height > 0 && width > 0 && (\n                    <Svg style={{ height, width }}>\n                        {/* center the progress circle*/}\n                        <G x={width / 2} y={height / 2}>\n                            {React.Children.map(children, (child) => {\n                                if (child && child.props.belowChart) {\n                                    return React.cloneElement(child, extraProps)\n                                }\n                                return null\n                            })}\n                            {arcs.map((shape, index) => {\n                                return (\n                                    <Path\n                                        key={index}\n                                        fill={shape.color}\n                                        d={shape.path}\n                                        animate={animate}\n                                        animationDuration={animateDuration}\n                                    />\n                                )\n                            })}\n                            {React.Children.map(children, (child) => {\n                                if (child && !child.props.belowChart) {\n                                    return React.cloneElement(child, extraProps)\n                                }\n                                return null\n                            })}\n                        </G>\n                    </Svg>\n                )}\n            </View>\n        )\n    }\n}\n\nProgressCircle.propTypes = {\n    progress: PropTypes.number.isRequired,\n    style: PropTypes.any,\n    progressColor: PropTypes.any,\n    backgroundColor: PropTypes.any,\n    strokeWidth: PropTypes.number,\n    startAngle: PropTypes.number,\n    endAngle: PropTypes.number,\n    animate: PropTypes.bool,\n    cornerRadius: PropTypes.number,\n    animateDuration: PropTypes.number,\n}\n\nProgressCircle.defaultProps = {\n    progressColor: 'black',\n    backgroundColor: '#ECECEC',\n    strokeWidth: 5,\n    startAngle: 0,\n    endAngle: Math.PI * 2,\n    cornerRadius: 45,\n}\n\nexport default ProgressCircle\n"]}