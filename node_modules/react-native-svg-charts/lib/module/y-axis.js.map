{"version":3,"sources":["y-axis.js"],"names":["React","PureComponent","PropTypes","Text","View","Svg","G","SVGText","d3Scale","array","YAxis","height","width","_onLayout","event","nativeEvent","layout","setState","getY","domain","scale","spacingInner","spacingOuter","contentInset","top","bottom","props","state","y","range","scaleBand","paddingInner","paddingOuter","value","bandwidth","render","style","data","yAccessor","numberOfTicks","formatLabel","svg","children","length","values","map","item","index","extent","min","max","ticks","longestValue","reduce","prev","curr","toString","extraProps","flexGrow","opacity","fontSize","fontFamily","fontWeight","position","left","Children","child","cloneElement","propTypes","oneOfType","arrayOf","object","number","isRequired","any","func","shape","defaultProps","scaleLinear"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { Text, View } from 'react-native'\nimport { Svg, G, Text as SVGText } from 'react-native-svg'\nimport * as d3Scale from 'd3-scale'\nimport * as array from 'd3-array'\n\nclass YAxis extends PureComponent {\n    state = {\n        height: 0,\n        width: 0,\n    }\n\n    _onLayout(event) {\n        const {\n            nativeEvent: {\n                layout: { height, width },\n            },\n        } = event\n        this.setState({ height, width })\n    }\n\n    getY(domain) {\n        const {\n            scale,\n            spacingInner,\n            spacingOuter,\n            contentInset: { top = 0, bottom = 0 },\n        } = this.props\n\n        const { height } = this.state\n\n        const y = scale()\n            .domain(domain)\n            .range([height - bottom, top])\n\n        if (scale === d3Scale.scaleBand) {\n            // use index as domain identifier instead of value since\n            // same value can occur at several places in dataPoints\n            y\n                // set range top to bottom - we are not sorting on values in scaleBand\n                .range([top, height - bottom])\n                .paddingInner([spacingInner])\n                .paddingOuter([spacingOuter])\n\n            //add half a bar to center label\n            return (value) => y(value) + y.bandwidth() / 2\n        }\n\n        return y\n    }\n\n    render() {\n        const { style, data, scale, yAccessor, numberOfTicks, formatLabel, svg, children } = this.props\n\n        const { height, width } = this.state\n\n        if (data.length === 0) {\n            return <View style={style} />\n        }\n\n        const values = data.map((item, index) => yAccessor({ item, index }))\n\n        const extent = array.extent(values)\n\n        const { min = extent[0], max = extent[1] } = this.props\n\n        const domain = scale === d3Scale.scaleBand ? values : [min, max]\n\n        //invert range to support svg coordinate system\n        const y = this.getY(domain)\n\n        const ticks = scale === d3Scale.scaleBand ? values : y.ticks(numberOfTicks)\n\n        const longestValue = ticks\n            .map((value, index) => formatLabel(value, index))\n            .reduce((prev, curr) => (prev.toString().length > curr.toString().length ? prev : curr), 0)\n\n        const extraProps = {\n            y,\n            ticks,\n            width,\n            height,\n            formatLabel,\n        }\n\n        return (\n            <View style={[style]}>\n                <View style={{ flexGrow: 1 }} onLayout={(event) => this._onLayout(event)}>\n                    {/*invisible text to allow for parent resizing*/}\n                    <Text\n                        style={{\n                            opacity: 0,\n                            fontSize: svg.fontSize,\n                            fontFamily: svg.fontFamily,\n                            fontWeight: svg.fontWeight,\n                        }}\n                    >\n                        {longestValue}\n                    </Text>\n                    {height > 0 && width > 0 && (\n                        <Svg\n                            style={{\n                                position: 'absolute',\n                                top: 0,\n                                left: 0,\n                                height,\n                                width,\n                            }}\n                        >\n                            <G>\n                                {React.Children.map(children, (child) => {\n                                    return React.cloneElement(child, extraProps)\n                                })}\n                                {// don't render labels if width isn't measured yet,\n                                // causes rendering issues\n                                height > 0 &&\n                                    ticks.map((value, index) => {\n                                        return (\n                                            <SVGText\n                                                originY={y(value)}\n                                                textAnchor={'middle'}\n                                                x={'50%'}\n                                                alignmentBaseline={'middle'}\n                                                {...svg}\n                                                key={y(value)}\n                                                y={y(value)}\n                                            >\n                                                {formatLabel(value, index, ticks.length)}\n                                            </SVGText>\n                                        )\n                                    })}\n                            </G>\n                        </Svg>\n                    )}\n                </View>\n            </View>\n        )\n    }\n}\n\nYAxis.propTypes = {\n    data: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.object), PropTypes.arrayOf(PropTypes.number)]).isRequired,\n    svg: PropTypes.object,\n    style: PropTypes.any,\n    numberOfTicks: PropTypes.number,\n    formatLabel: PropTypes.func,\n    contentInset: PropTypes.shape({\n        top: PropTypes.number,\n        bottom: PropTypes.number,\n    }),\n    min: PropTypes.number,\n    max: PropTypes.number,\n    yAccessor: PropTypes.func,\n    scale: PropTypes.func,\n    spacingInner: PropTypes.number,\n    spacingOuter: PropTypes.number,\n}\n\nYAxis.defaultProps = {\n    numberOfTicks: 10,\n    spacingInner: 0.05,\n    spacingOuter: 0.05,\n    contentInset: {},\n    svg: {},\n    scale: d3Scale.scaleLinear,\n    formatLabel: (value) => value && value.toString(),\n    yAccessor: ({ item }) => item,\n}\n\nexport default YAxis\n"]}