{"version":3,"sources":["x-axis.js"],"names":["React","PureComponent","PropTypes","Text","View","d3Scale","array","Svg","G","SVGText","XAxis","width","height","_onLayout","event","nativeEvent","layout","state","setState","_getX","domain","scale","spacingInner","spacingOuter","contentInset","left","right","props","x","range","scaleBand","paddingInner","paddingOuter","value","bandwidth","render","style","data","xAccessor","formatLabel","numberOfTicks","svg","children","min","max","length","values","map","item","index","extent","ticks","extraProps","flexGrow","opacity","fontSize","fontFamily","fontWeight","position","top","Children","child","cloneElement","valueSvg","propTypes","arrayOf","oneOfType","number","object","isRequired","func","shape","any","defaultProps","scaleLinear"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { Text, View } from 'react-native'\nimport * as d3Scale from 'd3-scale'\nimport * as array from 'd3-array'\nimport Svg, { G, Text as SVGText } from 'react-native-svg'\n\nclass XAxis extends PureComponent {\n    state = {\n        width: 0,\n        height: 0,\n    }\n\n    _onLayout(event) {\n        const {\n            nativeEvent: {\n                layout: { width, height },\n            },\n        } = event\n\n        if (width !== this.state.width) {\n            this.setState({ width, height })\n        }\n    }\n\n    _getX(domain) {\n        const {\n            scale,\n            spacingInner,\n            spacingOuter,\n            contentInset: { left = 0, right = 0 },\n        } = this.props\n\n        const { width } = this.state\n\n        const x = scale()\n            .domain(domain)\n            .range([left, width - right])\n\n        if (scale === d3Scale.scaleBand) {\n            x.paddingInner([spacingInner]).paddingOuter([spacingOuter])\n\n            //add half a bar to center label\n            return (value) => x(value) + x.bandwidth() / 2\n        }\n\n        return x\n    }\n\n    render() {\n        const { style, scale, data, xAccessor, formatLabel, numberOfTicks, svg, children, min, max } = this.props\n\n        const { height, width } = this.state\n\n        if (data.length === 0) {\n            return <View style={style} />\n        }\n\n        const values = data.map((item, index) => xAccessor({ item, index }))\n        const extent = array.extent(values)\n        const domain = scale === d3Scale.scaleBand ? values : [min || extent[0], max || extent[1]]\n\n        const x = this._getX(domain)\n        const ticks = numberOfTicks ? x.ticks(numberOfTicks) : values\n\n        const extraProps = {\n            x,\n            ticks,\n            width,\n            height,\n            formatLabel,\n        }\n\n        return (\n            <View style={style}>\n                <View style={{ flexGrow: 1 }} onLayout={(event) => this._onLayout(event)}>\n                    {/*invisible text to allow for parent resizing*/}\n                    <Text\n                        style={{\n                            opacity: 0,\n                            fontSize: svg.fontSize,\n                            fontFamily: svg.fontFamily,\n                            fontWeight: svg.fontWeight,\n                        }}\n                    >\n                        {formatLabel(ticks[0], 0)}\n                    </Text>\n                    {height > 0 && width > 0 && (\n                        <Svg\n                            style={{\n                                position: 'absolute',\n                                top: 0,\n                                left: 0,\n                                height,\n                                width,\n                            }}\n                        >\n                            <G>\n                                {React.Children.map(children, (child) => {\n                                    return React.cloneElement(child, extraProps)\n                                })}\n                                {// don't render labels if width isn't measured yet,\n                                // causes rendering issues\n                                width > 0 &&\n                                    ticks.map((value, index) => {\n                                        const { svg: valueSvg = {} } = data[index] || {}\n\n                                        return (\n                                            <SVGText\n                                                textAnchor={'middle'}\n                                                originX={x(value)}\n                                                alignmentBaseline={'hanging'}\n                                                {...svg}\n                                                {...valueSvg}\n                                                key={index}\n                                                x={x(value)}\n                                            >\n                                                {formatLabel(value, index)}\n                                            </SVGText>\n                                        )\n                                    })}\n                            </G>\n                        </Svg>\n                    )}\n                </View>\n            </View>\n        )\n    }\n}\n\nXAxis.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.object])).isRequired,\n    spacingInner: PropTypes.number,\n    spacingOuter: PropTypes.number,\n    formatLabel: PropTypes.func,\n    contentInset: PropTypes.shape({\n        left: PropTypes.number,\n        right: PropTypes.number,\n    }),\n    scale: PropTypes.func,\n    numberOfTicks: PropTypes.number,\n    xAccessor: PropTypes.func,\n    svg: PropTypes.object,\n    min: PropTypes.any,\n    max: PropTypes.any,\n}\n\nXAxis.defaultProps = {\n    spacingInner: 0.05,\n    spacingOuter: 0.05,\n    contentInset: {},\n    svg: {},\n    xAccessor: ({ index }) => index,\n    scale: d3Scale.scaleLinear,\n    formatLabel: (value) => value,\n}\n\nexport default XAxis\n"]}