{"version":3,"sources":["animated-path.js"],"names":["React","Component","InteractionManager","PropTypes","Path","interpolate","AnimatedPath","constructor","props","state","d","componentDidUpdate","newD","animate","oldD","interpolator","interpolatePath","_animate","componentWillUnmount","cancelAnimationFrame","animation","_clearInteraction","start","requestAnimationFrame","timestamp","handle","createInteractionHandle","delta","animationDuration","component","setNativeProps","setState","clearInteractionHandle","render","ref","propTypes","bool","number","renderPlaceholder","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { InteractionManager } from 'react-native'\nimport PropTypes from 'prop-types'\nimport { Path } from 'react-native-svg'\nimport * as interpolate from 'd3-interpolate-path'\n\nclass AnimatedPath extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = { d: props.d }\n    }\n\n    componentDidUpdate(props) {\n        const { d: newD, animate } = this.props\n        const { d: oldD } = props\n\n        this.newD = newD\n\n        if (newD === oldD) {\n            return\n        }\n\n        if (!animate || newD === null || oldD === null) {\n            return\n        }\n\n        this.newD = newD\n        this.interpolator = interpolate.interpolatePath(oldD, newD)\n\n        this._animate()\n    }\n\n    componentWillUnmount() {\n        cancelAnimationFrame(this.animation)\n        this._clearInteraction()\n    }\n\n    _animate(start) {\n        cancelAnimationFrame(this.animation)\n        this.animation = requestAnimationFrame((timestamp) => {\n            if (!start) {\n                this._clearInteraction()\n                this.handle = InteractionManager.createInteractionHandle()\n\n                start = timestamp\n            }\n\n            // Get the delta on how far long in our animation we are.\n            const delta = (timestamp - start) / this.props.animationDuration\n\n            // If we're above 1 then our animation should be complete.\n            if (delta > 1) {\n                // Just to be safe set our final value to the new graph path.\n                this.component.setNativeProps({ d: this.newD })\n                // Stop our animation loop.\n                this._clearInteraction()\n                return\n            }\n\n            const d = this.interpolator(delta)\n            this.component.setNativeProps({ d })\n            // console.log(this.interpolator)\n            // this.tween && console.log(this.tween.tween(delta))\n            // Tween the SVG path value according to what delta we're currently at.\n\n            // Update our state with the new tween value and then jump back into\n            // this loop.\n            this.setState(this.state, () => {\n                this._animate(start)\n            })\n        })\n    }\n\n    _clearInteraction() {\n        if (this.handle) {\n            InteractionManager.clearInteractionHandle(this.handle)\n            this.handle = null\n        }\n    }\n\n    render() {\n        return (\n            <Path\n                ref={(ref) => (this.component = ref)}\n                {...this.props}\n                d={this.props.animate ? this.state.d : this.props.d}\n            />\n        )\n    }\n}\n\nAnimatedPath.propTypes = {\n    animate: PropTypes.bool,\n    animationDuration: PropTypes.number,\n    renderPlaceholder: PropTypes.func,\n    ...Path.propTypes,\n}\n\nAnimatedPath.defaultProps = {\n    animate: false,\n    animationDuration: 300,\n    renderPlaceholder: () => null,\n}\n\nexport default AnimatedPath\n"]}