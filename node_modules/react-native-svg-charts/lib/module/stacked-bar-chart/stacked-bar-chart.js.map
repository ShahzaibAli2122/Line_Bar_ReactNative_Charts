{"version":3,"sources":["stacked-bar-chart.js"],"names":["array","scale","shape","PropTypes","React","PureComponent","View","Svg","Path","BarChart","width","height","extractDataPoints","data","keys","order","stackOrderNone","offset","stackOffsetNone","series","stack","merge","_onLayout","event","nativeEvent","layout","setState","calcXScale","domain","props","horizontal","contentInset","left","right","spacingInner","spacingOuter","state","scaleLinear","range","scaleBand","map","_","index","paddingInner","paddingOuter","calcYScale","top","bottom","calcAreas","x","y","colors","serie","keyIndex","entry","entryIndex","path","area","x0","d","x1","_index","bandwidth","defined","isNaN","color","key","y0","y1","calcExtent","values","gridMax","gridMin","extent","calcIndexes","getSeries","valueAccessor","value","item","render","animate","animationDuration","style","numberOfTicks","children","length","indexes","ticks","xDomain","yDomain","areas","extraProps","flex","Children","child","belowChart","cloneElement","bar","svg","propTypes","arrayOf","object","string","isRequired","func","any","number","bool","defaultProps","showZeroAxis","showGrid"],"mappings":"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","sourcesContent":["import * as array from 'd3-array'\nimport * as scale from 'd3-scale'\nimport * as shape from 'd3-shape'\nimport PropTypes from 'prop-types'\nimport React, { PureComponent } from 'react'\nimport { View } from 'react-native'\nimport Svg from 'react-native-svg'\nimport Path from '../animated-path'\n\nclass BarChart extends PureComponent {\n    static extractDataPoints(data, keys, order = shape.stackOrderNone, offset = shape.stackOffsetNone) {\n        const series = shape\n            .stack()\n            .keys(keys)\n            .order(order)\n            .offset(offset)(data)\n\n        //double merge arrays to extract just the values\n        return array.merge(array.merge(series))\n    }\n\n    state = {\n        width: 0,\n        height: 0,\n    }\n\n    _onLayout(event) {\n        const {\n            nativeEvent: {\n                layout: { height, width },\n            },\n        } = event\n        this.setState({ height, width })\n    }\n\n    calcXScale(domain) {\n        const { data } = this.props\n\n        const {\n            horizontal,\n            contentInset: { left = 0, right = 0 },\n            spacingInner,\n            spacingOuter,\n        } = this.props\n\n        const { width } = this.state\n\n        if (horizontal) {\n            return scale\n                .scaleLinear()\n                .domain(domain)\n                .range([left, width - right])\n        }\n\n        // use index as domain identifier instead of value since\n        // domain must be same length as number of bars\n        // same value can occur at several places in data\n        return scale\n            .scaleBand()\n            .domain(data.map((_, index) => index))\n            .range([left, width - right])\n            .paddingInner([spacingInner])\n            .paddingOuter([spacingOuter])\n    }\n\n    calcYScale(domain) {\n        const { data } = this.props\n\n        const {\n            horizontal,\n            contentInset: { top = 0, bottom = 0 },\n            spacingInner,\n            spacingOuter,\n        } = this.props\n\n        const { height } = this.state\n\n        if (horizontal) {\n            return scale\n                .scaleBand()\n                .domain(data.map((_, index) => index))\n                .range([top, height - bottom])\n                .paddingInner([spacingInner])\n                .paddingOuter([spacingOuter])\n        }\n\n        return scale\n            .scaleLinear()\n            .domain(domain)\n            .range([height - bottom, top])\n    }\n\n    calcAreas(x, y, series) {\n        const { horizontal, colors, keys } = this.props\n\n        if (horizontal) {\n            return array.merge(\n                series.map((serie, keyIndex) => {\n                    return serie.map((entry, entryIndex) => {\n                        const path = shape\n                            .area()\n                            .x0((d) => x(d[0]))\n                            .x1((d) => x(d[1]))\n                            .y((d, _index) => (_index === 0 ? y(entryIndex) : y(entryIndex) + y.bandwidth()))\n                            .defined((d) => !isNaN(d[0]) && !isNaN(d[1]))([entry, entry])\n\n                        return {\n                            path,\n                            color: colors[keyIndex],\n                            key: keys[keyIndex],\n                        }\n                    })\n                })\n            )\n        }\n\n        return array.merge(\n            series.map((serie, keyIndex) => {\n                return serie.map((entry, entryIndex) => {\n                    const path = shape\n                        .area()\n                        .y0((d) => y(d[0]))\n                        .y1((d) => y(d[1]))\n                        .x((d, _index) => (_index === 0 ? x(entryIndex) : x(entryIndex) + x.bandwidth()))\n                        .defined((d) => !isNaN(d[0]) && !isNaN(d[1]))([entry, entry])\n\n                    return {\n                        path,\n                        color: colors[keyIndex],\n                        key: keys[keyIndex],\n                    }\n                })\n            })\n        )\n    }\n\n    calcExtent(values) {\n        const { gridMax, gridMin } = this.props\n\n        return array.extent([...values, gridMin, gridMax])\n    }\n\n    calcIndexes(values) {\n        return values.map((_, index) => index)\n    }\n\n    getSeries() {\n        const { data, keys, offset, order, valueAccessor } = this.props\n\n        return shape\n            .stack()\n            .keys(keys)\n            .value((item, key) => valueAccessor({ item, key }))\n            .order(order)\n            .offset(offset)(data)\n    }\n\n    render() {\n        const { data, animate, animationDuration, style, numberOfTicks, children, horizontal } = this.props\n\n        const { height, width } = this.state\n\n        if (data.length === 0) {\n            return <View style={style} />\n        }\n\n        const series = this.getSeries()\n\n        //double merge arrays to extract just the values\n        const values = array.merge(array.merge(series))\n        const indexes = this.calcIndexes(values)\n\n        const extent = this.calcExtent(values)\n        const ticks = array.ticks(extent[0], extent[1], numberOfTicks)\n\n        const xDomain = horizontal ? extent : indexes\n        const yDomain = horizontal ? indexes : extent\n\n        const x = this.calcXScale(xDomain)\n        const y = this.calcYScale(yDomain)\n\n        const bandwidth = horizontal ? y.bandwidth() : x.bandwidth()\n\n        const areas = this.calcAreas(x, y, series)\n\n        const extraProps = {\n            x,\n            y,\n            width,\n            height,\n            ticks,\n            data,\n            bandwidth,\n        }\n\n        return (\n            <View style={style}>\n                <View style={{ flex: 1 }} onLayout={(event) => this._onLayout(event)}>\n                    {height > 0 && width > 0 && (\n                        <Svg style={{ height, width }}>\n                            {React.Children.map(children, (child) => {\n                                if (child && child.props.belowChart) {\n                                    return React.cloneElement(child, extraProps)\n                                }\n                                return null\n                            })}\n                            {areas.map((bar, index) => {\n                                const keyIndex = index % data.length\n                                const key = `${keyIndex}-${bar.key}`\n                                const { svg } = data[keyIndex][bar.key]\n\n                                return (\n                                    <Path\n                                        key={key}\n                                        fill={bar.color}\n                                        {...svg}\n                                        d={bar.path}\n                                        animate={animate}\n                                        animationDuration={animationDuration}\n                                    />\n                                )\n                            })}\n                            {React.Children.map(children, (child) => {\n                                if (child && !child.props.belowChart) {\n                                    return React.cloneElement(child, extraProps)\n                                }\n                                return null\n                            })}\n                        </Svg>\n                    )}\n                </View>\n            </View>\n        )\n    }\n}\n\nBarChart.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.object),\n    keys: PropTypes.arrayOf(PropTypes.string).isRequired,\n    colors: PropTypes.arrayOf(PropTypes.string).isRequired,\n    offset: PropTypes.func,\n    order: PropTypes.func,\n    style: PropTypes.any,\n    spacingInner: PropTypes.number,\n    spacingOuter: PropTypes.number,\n    animate: PropTypes.bool,\n    animationDuration: PropTypes.number,\n    contentInset: PropTypes.shape({\n        top: PropTypes.number,\n        left: PropTypes.number,\n        right: PropTypes.number,\n        bottom: PropTypes.number,\n    }),\n    gridMin: PropTypes.number,\n    gridMax: PropTypes.number,\n    valueAccessor: PropTypes.func,\n}\n\nBarChart.defaultProps = {\n    spacingInner: 0.05,\n    spacingOuter: 0.05,\n    offset: shape.stackOffsetNone,\n    order: shape.stackOrderNone,\n    width: 100,\n    height: 100,\n    showZeroAxis: true,\n    contentInset: {},\n    numberOfTicks: 10,\n    showGrid: true,\n    valueAccessor: ({ item, key }) => item[key],\n}\n\nexport default BarChart\n"]}